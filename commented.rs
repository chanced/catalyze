// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `commented/commented.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

///  Message0 comments
// @@protoc_insertion_point(message:commented.Message0)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Message0 {
    // message fields
    ///  optional field comments
    // @@protoc_insertion_point(field:commented.Message0.field)
    pub field: ::std::option::Option<::std::string::String>,
    ///  repeated field comments
    // @@protoc_insertion_point(field:commented.Message0.repeated_field)
    pub repeated_field: ::std::vec::Vec<::std::string::String>,
    ///  required field comments
    // @@protoc_insertion_point(field:commented.Message0.required_field)
    pub required_field: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:commented.Message0.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Message0 {
    fn default() -> &'a Message0 {
        <Message0 as ::protobuf::Message>::default_instance()
    }
}

impl Message0 {
    pub fn new() -> Message0 {
        ::std::default::Default::default()
    }

    // optional string field = 1;

    pub fn field(&self) -> &str {
        match self.field.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_field(&mut self) {
        self.field = ::std::option::Option::None;
    }

    pub fn has_field(&self) -> bool {
        self.field.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field(&mut self, v: ::std::string::String) {
        self.field = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field(&mut self) -> &mut ::std::string::String {
        if self.field.is_none() {
            self.field = ::std::option::Option::Some(::std::string::String::new());
        }
        self.field.as_mut().unwrap()
    }

    // Take field
    pub fn take_field(&mut self) -> ::std::string::String {
        self.field.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string required_field = 3;

    pub fn required_field(&self) -> &str {
        match self.required_field.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_required_field(&mut self) {
        self.required_field = ::std::option::Option::None;
    }

    pub fn has_required_field(&self) -> bool {
        self.required_field.is_some()
    }

    // Param is passed by value, moved
    pub fn set_required_field(&mut self, v: ::std::string::String) {
        self.required_field = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_required_field(&mut self) -> &mut ::std::string::String {
        if self.required_field.is_none() {
            self.required_field = ::std::option::Option::Some(::std::string::String::new());
        }
        self.required_field.as_mut().unwrap()
    }

    // Take field
    pub fn take_required_field(&mut self) -> ::std::string::String {
        self.required_field.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "field",
            |m: &Message0| { &m.field },
            |m: &mut Message0| { &mut m.field },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "repeated_field",
            |m: &Message0| { &m.repeated_field },
            |m: &mut Message0| { &mut m.repeated_field },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "required_field",
            |m: &Message0| { &m.required_field },
            |m: &mut Message0| { &mut m.required_field },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Message0>(
            "Message0",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Message0 {
    const NAME: &'static str = "Message0";

    fn is_initialized(&self) -> bool {
        if self.required_field.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.field = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.repeated_field.push(is.read_string()?);
                },
                26 => {
                    self.required_field = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.field.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        for value in &self.repeated_field {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        if let Some(v) = self.required_field.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.field.as_ref() {
            os.write_string(1, v)?;
        }
        for v in &self.repeated_field {
            os.write_string(2, &v)?;
        };
        if let Some(v) = self.required_field.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Message0 {
        Message0::new()
    }

    fn clear(&mut self) {
        self.field = ::std::option::Option::None;
        self.repeated_field.clear();
        self.required_field = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Message0 {
        static instance: Message0 = Message0 {
            field: ::std::option::Option::None,
            repeated_field: ::std::vec::Vec::new(),
            required_field: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Message0 {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Message0").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Message0 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Message0 {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Message0`
pub mod message0 {
    ///  Message0EmbeddedEnum comments
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:commented.Message0.Message0EmbeddedEnum)
    pub enum Message0EmbeddedEnum {
        // @@protoc_insertion_point(enum_value:commented.Message0.Message0EmbeddedEnum.Zero)
        Zero = 0,
        // @@protoc_insertion_point(enum_value:commented.Message0.Message0EmbeddedEnum.One)
        One = 1,
        // @@protoc_insertion_point(enum_value:commented.Message0.Message0EmbeddedEnum.Two)
        Two = 2,
    }

    impl ::protobuf::Enum for Message0EmbeddedEnum {
        const NAME: &'static str = "Message0EmbeddedEnum";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Message0EmbeddedEnum> {
            match value {
                0 => ::std::option::Option::Some(Message0EmbeddedEnum::Zero),
                1 => ::std::option::Option::Some(Message0EmbeddedEnum::One),
                2 => ::std::option::Option::Some(Message0EmbeddedEnum::Two),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Message0EmbeddedEnum> {
            match str {
                "Zero" => ::std::option::Option::Some(Message0EmbeddedEnum::Zero),
                "One" => ::std::option::Option::Some(Message0EmbeddedEnum::One),
                "Two" => ::std::option::Option::Some(Message0EmbeddedEnum::Two),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Message0EmbeddedEnum] = &[
            Message0EmbeddedEnum::Zero,
            Message0EmbeddedEnum::One,
            Message0EmbeddedEnum::Two,
        ];
    }

    impl ::protobuf::EnumFull for Message0EmbeddedEnum {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("Message0.Message0EmbeddedEnum").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Message0EmbeddedEnum {
        fn default() -> Self {
            Message0EmbeddedEnum::Zero
        }
    }

    impl Message0EmbeddedEnum {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Message0EmbeddedEnum>("Message0.Message0EmbeddedEnum")
        }
    }
}

///  Message1 comments
// @@protoc_insertion_point(message:commented.Message1)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Message1 {
    // special fields
    // @@protoc_insertion_point(special_field:commented.Message1.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Message1 {
    fn default() -> &'a Message1 {
        <Message1 as ::protobuf::Message>::default_instance()
    }
}

impl Message1 {
    pub fn new() -> Message1 {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Message1>(
            "Message1",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Message1 {
    const NAME: &'static str = "Message1";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Message1 {
        Message1::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Message1 {
        static instance: Message1 = Message1 {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Message1 {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Message1").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Message1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Message1 {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Message2 comments
// @@protoc_insertion_point(message:commented.Message2)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Message2 {
    // message fields
    ///  field comments
    // @@protoc_insertion_point(field:commented.Message2.field)
    pub field: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:commented.Message2.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Message2 {
    fn default() -> &'a Message2 {
        <Message2 as ::protobuf::Message>::default_instance()
    }
}

impl Message2 {
    pub fn new() -> Message2 {
        ::std::default::Default::default()
    }

    // optional string field = 1;

    pub fn field(&self) -> &str {
        match self.field.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_field(&mut self) {
        self.field = ::std::option::Option::None;
    }

    pub fn has_field(&self) -> bool {
        self.field.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field(&mut self, v: ::std::string::String) {
        self.field = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field(&mut self) -> &mut ::std::string::String {
        if self.field.is_none() {
            self.field = ::std::option::Option::Some(::std::string::String::new());
        }
        self.field.as_mut().unwrap()
    }

    // Take field
    pub fn take_field(&mut self) -> ::std::string::String {
        self.field.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "field",
            |m: &Message2| { &m.field },
            |m: &mut Message2| { &mut m.field },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Message2>(
            "Message2",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Message2 {
    const NAME: &'static str = "Message2";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.field = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.field.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.field.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Message2 {
        Message2::new()
    }

    fn clear(&mut self) {
        self.field = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Message2 {
        static instance: Message2 = Message2 {
            field: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Message2 {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Message2").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Message2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Message2 {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Message2`
pub mod message2 {
    ///  Message2EmbeddedMessage comments
    // @@protoc_insertion_point(message:commented.Message2.Message2EmbeddedMessage)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Message2EmbeddedMessage {
        // message fields
        ///  Nested message field
        // @@protoc_insertion_point(field:commented.Message2.Message2EmbeddedMessage.nested_message)
        pub nested_message: ::protobuf::MessageField<super::Message0>,
        // special fields
        // @@protoc_insertion_point(special_field:commented.Message2.Message2EmbeddedMessage.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Message2EmbeddedMessage {
        fn default() -> &'a Message2EmbeddedMessage {
            <Message2EmbeddedMessage as ::protobuf::Message>::default_instance()
        }
    }

    impl Message2EmbeddedMessage {
        pub fn new() -> Message2EmbeddedMessage {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Message0>(
                "nested_message",
                |m: &Message2EmbeddedMessage| { &m.nested_message },
                |m: &mut Message2EmbeddedMessage| { &mut m.nested_message },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Message2EmbeddedMessage>(
                "Message2.Message2EmbeddedMessage",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Message2EmbeddedMessage {
        const NAME: &'static str = "Message2EmbeddedMessage";

        fn is_initialized(&self) -> bool {
            for v in &self.nested_message {
                if !v.is_initialized() {
                    return false;
                }
            };
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.nested_message)?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.nested_message.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.nested_message.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Message2EmbeddedMessage {
            Message2EmbeddedMessage::new()
        }

        fn clear(&mut self) {
            self.nested_message.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Message2EmbeddedMessage {
            static instance: Message2EmbeddedMessage = Message2EmbeddedMessage {
                nested_message: ::protobuf::MessageField::none(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Message2EmbeddedMessage {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Message2.Message2EmbeddedMessage").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Message2EmbeddedMessage {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Message2EmbeddedMessage {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `Message2EmbeddedMessage`
    pub mod message2embedded_message {
        ///  Message2EmbeddedMessage comments
        // @@protoc_insertion_point(message:commented.Message2.Message2EmbeddedMessage.Message2EmbeddedMessage)
        #[derive(PartialEq,Clone,Default,Debug)]
        pub struct Message2EmbeddedMessage {
            // message fields
            ///  Nested message field comments
            // @@protoc_insertion_point(field:commented.Message2.Message2EmbeddedMessage.Message2EmbeddedMessage.field)
            pub field: ::std::option::Option<::std::string::String>,
            // special fields
            // @@protoc_insertion_point(special_field:commented.Message2.Message2EmbeddedMessage.Message2EmbeddedMessage.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a Message2EmbeddedMessage {
            fn default() -> &'a Message2EmbeddedMessage {
                <Message2EmbeddedMessage as ::protobuf::Message>::default_instance()
            }
        }

        impl Message2EmbeddedMessage {
            pub fn new() -> Message2EmbeddedMessage {
                ::std::default::Default::default()
            }

            // optional string field = 1;

            pub fn field(&self) -> &str {
                match self.field.as_ref() {
                    Some(v) => v,
                    None => "",
                }
            }

            pub fn clear_field(&mut self) {
                self.field = ::std::option::Option::None;
            }

            pub fn has_field(&self) -> bool {
                self.field.is_some()
            }

            // Param is passed by value, moved
            pub fn set_field(&mut self, v: ::std::string::String) {
                self.field = ::std::option::Option::Some(v);
            }

            // Mutable pointer to the field.
            // If field is not initialized, it is initialized with default value first.
            pub fn mut_field(&mut self) -> &mut ::std::string::String {
                if self.field.is_none() {
                    self.field = ::std::option::Option::Some(::std::string::String::new());
                }
                self.field.as_mut().unwrap()
            }

            // Take field
            pub fn take_field(&mut self) -> ::std::string::String {
                self.field.take().unwrap_or_else(|| ::std::string::String::new())
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(1);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                    "field",
                    |m: &Message2EmbeddedMessage| { &m.field },
                    |m: &mut Message2EmbeddedMessage| { &mut m.field },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Message2EmbeddedMessage>(
                    "Message2.Message2EmbeddedMessage.Message2EmbeddedMessage",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for Message2EmbeddedMessage {
            const NAME: &'static str = "Message2EmbeddedMessage";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        10 => {
                            self.field = ::std::option::Option::Some(is.read_string()?);
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if let Some(v) = self.field.as_ref() {
                    my_size += ::protobuf::rt::string_size(1, &v);
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if let Some(v) = self.field.as_ref() {
                    os.write_string(1, v)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> Message2EmbeddedMessage {
                Message2EmbeddedMessage::new()
            }

            fn clear(&mut self) {
                self.field = ::std::option::Option::None;
                self.special_fields.clear();
            }

            fn default_instance() -> &'static Message2EmbeddedMessage {
                static instance: Message2EmbeddedMessage = Message2EmbeddedMessage {
                    field: ::std::option::Option::None,
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for Message2EmbeddedMessage {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("Message2.Message2EmbeddedMessage.Message2EmbeddedMessage").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for Message2EmbeddedMessage {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for Message2EmbeddedMessage {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }

        ///  Message2DeepEnum comments
        #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
        // @@protoc_insertion_point(enum:commented.Message2.Message2EmbeddedMessage.Message2DeepEnum)
        pub enum Message2DeepEnum {
            // @@protoc_insertion_point(enum_value:commented.Message2.Message2EmbeddedMessage.Message2DeepEnum.Zero)
            Zero = 0,
            // @@protoc_insertion_point(enum_value:commented.Message2.Message2EmbeddedMessage.Message2DeepEnum.One)
            One = 1,
            // @@protoc_insertion_point(enum_value:commented.Message2.Message2EmbeddedMessage.Message2DeepEnum.Two)
            Two = 2,
        }

        impl ::protobuf::Enum for Message2DeepEnum {
            const NAME: &'static str = "Message2DeepEnum";

            fn value(&self) -> i32 {
                *self as i32
            }

            fn from_i32(value: i32) -> ::std::option::Option<Message2DeepEnum> {
                match value {
                    0 => ::std::option::Option::Some(Message2DeepEnum::Zero),
                    1 => ::std::option::Option::Some(Message2DeepEnum::One),
                    2 => ::std::option::Option::Some(Message2DeepEnum::Two),
                    _ => ::std::option::Option::None
                }
            }

            fn from_str(str: &str) -> ::std::option::Option<Message2DeepEnum> {
                match str {
                    "Zero" => ::std::option::Option::Some(Message2DeepEnum::Zero),
                    "One" => ::std::option::Option::Some(Message2DeepEnum::One),
                    "Two" => ::std::option::Option::Some(Message2DeepEnum::Two),
                    _ => ::std::option::Option::None
                }
            }

            const VALUES: &'static [Message2DeepEnum] = &[
                Message2DeepEnum::Zero,
                Message2DeepEnum::One,
                Message2DeepEnum::Two,
            ];
        }

        impl ::protobuf::EnumFull for Message2DeepEnum {
            fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().enum_by_package_relative_name("Message2.Message2EmbeddedMessage.Message2DeepEnum").unwrap()).clone()
            }

            fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
                let index = *self as usize;
                Self::enum_descriptor().value_by_index(index)
            }
        }

        impl ::std::default::Default for Message2DeepEnum {
            fn default() -> Self {
                Message2DeepEnum::Zero
            }
        }

        impl Message2DeepEnum {
            pub(in super::super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
                ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Message2DeepEnum>("Message2.Message2EmbeddedMessage.Message2DeepEnum")
            }
        }
    }
}

///  Message3 comments
// @@protoc_insertion_point(message:commented.Message3)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Message3 {
    // message fields
    ///  Message3 field 0
    // @@protoc_insertion_point(field:commented.Message3.name)
    pub name: ::std::option::Option<::std::string::String>,
    ///  Message3 field 1
    // @@protoc_insertion_point(field:commented.Message3.lines)
    pub lines: ::std::vec::Vec<::std::string::String>,
    // message oneof groups
    pub oneof0: ::std::option::Option<message3::Oneof0>,
    // special fields
    // @@protoc_insertion_point(special_field:commented.Message3.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Message3 {
    fn default() -> &'a Message3 {
        <Message3 as ::protobuf::Message>::default_instance()
    }
}

impl Message3 {
    pub fn new() -> Message3 {
        ::std::default::Default::default()
    }

    // required string name = 1;

    pub fn name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_name(&mut self) {
        self.name = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string path = 4;

    pub fn path(&self) -> &str {
        match self.oneof0 {
            ::std::option::Option::Some(message3::Oneof0::Path(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_path(&mut self) {
        self.oneof0 = ::std::option::Option::None;
    }

    pub fn has_path(&self) -> bool {
        match self.oneof0 {
            ::std::option::Option::Some(message3::Oneof0::Path(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.oneof0 = ::std::option::Option::Some(message3::Oneof0::Path(v))
    }

    // Mutable pointer to the field.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(message3::Oneof0::Path(_)) = self.oneof0 {
        } else {
            self.oneof0 = ::std::option::Option::Some(message3::Oneof0::Path(::std::string::String::new()));
        }
        match self.oneof0 {
            ::std::option::Option::Some(message3::Oneof0::Path(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        if self.has_path() {
            match self.oneof0.take() {
                ::std::option::Option::Some(message3::Oneof0::Path(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // optional .commented.Message0 msg = 9;

    pub fn msg(&self) -> &Message0 {
        match self.oneof0 {
            ::std::option::Option::Some(message3::Oneof0::Msg(ref v)) => v,
            _ => <Message0 as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_msg(&mut self) {
        self.oneof0 = ::std::option::Option::None;
    }

    pub fn has_msg(&self) -> bool {
        match self.oneof0 {
            ::std::option::Option::Some(message3::Oneof0::Msg(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_msg(&mut self, v: Message0) {
        self.oneof0 = ::std::option::Option::Some(message3::Oneof0::Msg(v))
    }

    // Mutable pointer to the field.
    pub fn mut_msg(&mut self) -> &mut Message0 {
        if let ::std::option::Option::Some(message3::Oneof0::Msg(_)) = self.oneof0 {
        } else {
            self.oneof0 = ::std::option::Option::Some(message3::Oneof0::Msg(Message0::new()));
        }
        match self.oneof0 {
            ::std::option::Option::Some(message3::Oneof0::Msg(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_msg(&mut self) -> Message0 {
        if self.has_msg() {
            match self.oneof0.take() {
                ::std::option::Option::Some(message3::Oneof0::Msg(v)) => v,
                _ => panic!(),
            }
        } else {
            Message0::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "name",
            |m: &Message3| { &m.name },
            |m: &mut Message3| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "lines",
            |m: &Message3| { &m.lines },
            |m: &mut Message3| { &mut m.lines },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "path",
            Message3::has_path,
            Message3::path,
            Message3::set_path,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Message0>(
            "msg",
            Message3::has_msg,
            Message3::msg,
            Message3::mut_msg,
            Message3::set_msg,
        ));
        oneofs.push(message3::Oneof0::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Message3>(
            "Message3",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Message3 {
    const NAME: &'static str = "Message3";

    fn is_initialized(&self) -> bool {
        if self.name.is_none() {
            return false;
        }
        if let Some(message3::Oneof0::Msg(ref v)) = self.oneof0 {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.lines.push(is.read_string()?);
                },
                34 => {
                    self.oneof0 = ::std::option::Option::Some(message3::Oneof0::Path(is.read_string()?));
                },
                74 => {
                    self.oneof0 = ::std::option::Option::Some(message3::Oneof0::Msg(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        for value in &self.lines {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        if let ::std::option::Option::Some(ref v) = self.oneof0 {
            match v {
                &message3::Oneof0::Path(ref v) => {
                    my_size += ::protobuf::rt::string_size(4, &v);
                },
                &message3::Oneof0::Msg(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.name.as_ref() {
            os.write_string(1, v)?;
        }
        for v in &self.lines {
            os.write_string(2, &v)?;
        };
        if let ::std::option::Option::Some(ref v) = self.oneof0 {
            match v {
                &message3::Oneof0::Path(ref v) => {
                    os.write_string(4, v)?;
                },
                &message3::Oneof0::Msg(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Message3 {
        Message3::new()
    }

    fn clear(&mut self) {
        self.name = ::std::option::Option::None;
        self.lines.clear();
        self.oneof0 = ::std::option::Option::None;
        self.oneof0 = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Message3 {
        static instance: Message3 = Message3 {
            name: ::std::option::Option::None,
            lines: ::std::vec::Vec::new(),
            oneof0: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Message3 {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Message3").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Message3 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Message3 {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Message3`
pub mod message3 {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:commented.Message3.oneof0)
    pub enum Oneof0 {
        // @@protoc_insertion_point(oneof_field:commented.Message3.path)
        Path(::std::string::String),
        // @@protoc_insertion_point(oneof_field:commented.Message3.msg)
        Msg(super::Message0),
    }

    impl ::protobuf::Oneof for Oneof0 {
    }

    impl ::protobuf::OneofFull for Oneof0 {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::Message3 as ::protobuf::MessageFull>::descriptor().oneof_by_name("oneof0").unwrap()).clone()
        }
    }

    impl Oneof0 {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Oneof0>("oneof0")
        }
    }
}

///  Message4 comments
// @@protoc_insertion_point(message:commented.Message4)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Message4 {
    // special fields
    // @@protoc_insertion_point(special_field:commented.Message4.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Message4 {
    fn default() -> &'a Message4 {
        <Message4 as ::protobuf::Message>::default_instance()
    }
}

impl Message4 {
    pub fn new() -> Message4 {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Message4>(
            "Message4",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Message4 {
    const NAME: &'static str = "Message4";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Message4 {
        Message4::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Message4 {
        static instance: Message4 = Message4 {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Message4 {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Message4").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Message4 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Message4 {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Enum0 comments
#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:commented.Enum0)
pub enum Enum0 {
    // @@protoc_insertion_point(enum_value:commented.Enum0.Enum0_Zero)
    Enum0_Zero = 0,
    // @@protoc_insertion_point(enum_value:commented.Enum0.Enum0_One)
    Enum0_One = 1,
    // @@protoc_insertion_point(enum_value:commented.Enum0.Enum0_Two)
    Enum0_Two = 2,
}

impl ::protobuf::Enum for Enum0 {
    const NAME: &'static str = "Enum0";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Enum0> {
        match value {
            0 => ::std::option::Option::Some(Enum0::Enum0_Zero),
            1 => ::std::option::Option::Some(Enum0::Enum0_One),
            2 => ::std::option::Option::Some(Enum0::Enum0_Two),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<Enum0> {
        match str {
            "Enum0_Zero" => ::std::option::Option::Some(Enum0::Enum0_Zero),
            "Enum0_One" => ::std::option::Option::Some(Enum0::Enum0_One),
            "Enum0_Two" => ::std::option::Option::Some(Enum0::Enum0_Two),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [Enum0] = &[
        Enum0::Enum0_Zero,
        Enum0::Enum0_One,
        Enum0::Enum0_Two,
    ];
}

impl ::protobuf::EnumFull for Enum0 {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("Enum0").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for Enum0 {
    fn default() -> Self {
        Enum0::Enum0_Zero
    }
}

impl Enum0 {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Enum0>("Enum0")
    }
}

///  Enum1 comments
#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:commented.Enum1)
pub enum Enum1 {
    // @@protoc_insertion_point(enum_value:commented.Enum1.Enum1_Zero)
    Enum1_Zero = 0,
    // @@protoc_insertion_point(enum_value:commented.Enum1.Enum1_One)
    Enum1_One = 1,
    // @@protoc_insertion_point(enum_value:commented.Enum1.Enum1_Two)
    Enum1_Two = 2,
}

impl ::protobuf::Enum for Enum1 {
    const NAME: &'static str = "Enum1";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Enum1> {
        match value {
            0 => ::std::option::Option::Some(Enum1::Enum1_Zero),
            1 => ::std::option::Option::Some(Enum1::Enum1_One),
            2 => ::std::option::Option::Some(Enum1::Enum1_Two),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<Enum1> {
        match str {
            "Enum1_Zero" => ::std::option::Option::Some(Enum1::Enum1_Zero),
            "Enum1_One" => ::std::option::Option::Some(Enum1::Enum1_One),
            "Enum1_Two" => ::std::option::Option::Some(Enum1::Enum1_Two),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [Enum1] = &[
        Enum1::Enum1_Zero,
        Enum1::Enum1_One,
        Enum1::Enum1_Two,
    ];
}

impl ::protobuf::EnumFull for Enum1 {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("Enum1").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for Enum1 {
    fn default() -> Self {
        Enum1::Enum1_Zero
    }
}

impl Enum1 {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Enum1>("Enum1")
    }
}

/// Extension fields
pub mod exts {

    pub const extend0_field0: ::protobuf::ext::ExtFieldOptional<super::Message1, ::std::string::String> = ::protobuf::ext::ExtFieldOptional::new(103339, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_STRING);

    pub const extend0_field1: ::protobuf::ext::ExtFieldOptional<super::Message1, ::std::string::String> = ::protobuf::ext::ExtFieldOptional::new(103340, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_STRING);

    pub const extend0_field2: ::protobuf::ext::ExtFieldOptional<super::Message1, ::std::string::String> = ::protobuf::ext::ExtFieldOptional::new(103341, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_STRING);

    pub const extend1_field0: ::protobuf::ext::ExtFieldOptional<super::Message1, ::std::string::String> = ::protobuf::ext::ExtFieldOptional::new(113339, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_STRING);

    pub const extend1_field1: ::protobuf::ext::ExtFieldOptional<super::Message1, ::std::string::String> = ::protobuf::ext::ExtFieldOptional::new(113340, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_STRING);

    pub const extend1_field2: ::protobuf::ext::ExtFieldOptional<super::Message1, ::std::string::String> = ::protobuf::ext::ExtFieldOptional::new(113341, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_STRING);

    pub const extend2_field0: ::protobuf::ext::ExtFieldOptional<super::Message1, ::std::string::String> = ::protobuf::ext::ExtFieldOptional::new(123339, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_STRING);

    pub const extend2_field1: ::protobuf::ext::ExtFieldOptional<super::Message1, ::std::string::String> = ::protobuf::ext::ExtFieldOptional::new(123340, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_STRING);

    pub const extend2_field2: ::protobuf::ext::ExtFieldOptional<super::Message1, ::std::string::String> = ::protobuf::ext::ExtFieldOptional::new(123341, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_STRING);
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19commented/commented.proto\x12\tcommented\"\xa2\x01\n\x08Message0\
    \x12\x14\n\x05field\x18\x01\x20\x01(\tR\x05field\x12%\n\x0erepeated_fiel\
    d\x18\x02\x20\x03(\tR\rrepeatedField\x12%\n\x0erequired_field\x18\x03\
    \x20\x02(\tR\rrequiredField\"2\n\x14Message0EmbeddedEnum\x12\x08\n\x04Ze\
    ro\x10\0\x12\x07\n\x03One\x10\x01\x12\x07\n\x03Two\x10\x02\"\x15\n\x08Me\
    ssage1*\t\x08\xe8\x07\x10\x80\x80\x80\x80\x02\"\xd9\x01\n\x08Message2\
    \x12\x14\n\x05field\x18\x01\x20\x01(\tR\x05field\x1a\xb6\x01\n\x17Messag\
    e2EmbeddedMessage\x12:\n\x0enested_message\x18\x01\x20\x01(\x0b2\x13.com\
    mented.Message0R\rnestedMessage\x1a/\n\x17Message2EmbeddedMessage\x12\
    \x14\n\x05field\x18\x01\x20\x01(\tR\x05field\".\n\x10Message2DeepEnum\
    \x12\x08\n\x04Zero\x10\0\x12\x07\n\x03One\x10\x01\x12\x07\n\x03Two\x10\
    \x02\"}\n\x08Message3\x12\x12\n\x04name\x18\x01\x20\x02(\tR\x04name\x12\
    \x14\n\x05lines\x18\x02\x20\x03(\tR\x05lines\x12\x14\n\x04path\x18\x04\
    \x20\x01(\tH\0R\x04path\x12'\n\x03msg\x18\t\x20\x01(\x0b2\x13.commented.\
    Message0H\0R\x03msgB\x08\n\x06oneof0\"G\n\x08Message42;\n\x0eextended_fi\
    eld\x18\xd1h\x20\x01(\t\x12\x13.commented.Message1R\rextendedField*5\n\
    \x05Enum0\x12\x0e\n\nEnum0_Zero\x10\0\x12\r\n\tEnum0_One\x10\x01\x12\r\n\
    \tEnum0_Two\x10\x02*5\n\x05Enum1\x12\x0e\n\nEnum1_Zero\x10\0\x12\r\n\tEn\
    um1_One\x10\x01\x12\r\n\tEnum1_Two\x10\x022\xab\x01\n\x08Service0\x123\n\
    \x07Method0\x12\x13.commented.Message0\x1a\x13.commented.Message0\x123\n\
    \x07Method1\x12\x13.commented.Message1\x1a\x13.commented.Message1\x125\n\
    \x07Method2\x12\x13.commented.Message2\x1a\x13.commented.Message2(\x01:<\
    \n\x0eextend0_field0\x18\xab\xa7\x06\x20\x01(\t\x12\x13.commented.Messag\
    e1R\rextend0Field0:<\n\x0eextend0_field1\x18\xac\xa7\x06\x20\x01(\t\x12\
    \x13.commented.Message1R\rextend0Field1:<\n\x0eextend0_field2\x18\xad\
    \xa7\x06\x20\x01(\t\x12\x13.commented.Message1R\rextend0Field2:<\n\x0eex\
    tend1_field0\x18\xbb\xf5\x06\x20\x01(\t\x12\x13.commented.Message1R\rext\
    end1Field0:<\n\x0eextend1_field1\x18\xbc\xf5\x06\x20\x01(\t\x12\x13.comm\
    ented.Message1R\rextend1Field1:<\n\x0eextend1_field2\x18\xbd\xf5\x06\x20\
    \x01(\t\x12\x13.commented.Message1R\rextend1Field2:<\n\x0eextend2_field0\
    \x18\xcb\xc3\x07\x20\x01(\t\x12\x13.commented.Message1R\rextend2Field0:<\
    \n\x0eextend2_field1\x18\xcc\xc3\x07\x20\x01(\t\x12\x13.commented.Messag\
    e1R\rextend2Field1:<\n\x0eextend2_field2\x18\xcd\xc3\x07\x20\x01(\t\x12\
    \x13.commented.Message1R\rextend2Field2J\xaf\x1f\n\x07\x12\x05\x03\0\x98\
    \x01\x01\n/\n\x01\x0c\x12\x03\x03\0\x12\x1a\x11\x20syntax\x20comments\n2\
    \x12\x20leading\x20comments\n\n\x1c\n\x01\x02\x12\x03\x06\0\x12\x1a\x12\
    \x20package\x20comments\n\n\x1f\n\x02\x04\0\x12\x04\n\0\x1c\x01\x1a\x13\
    \x20Message0\x20comments\n\n\n\n\x03\x04\0\x01\x12\x03\n\x08\x10\n-\n\
    \x04\x04\0\x04\0\x12\x04\x0c\x02\x13\x03\x1a\x1f\x20Message0EmbeddedEnum\
    \x20comments\n\n\x0c\n\x05\x04\0\x04\0\x01\x12\x03\x0c\x07\x1b\n,\n\x06\
    \x04\0\x04\0\x02\0\x12\x03\x0e\x04\r\x1a\x1d\x20Zero\x20-\x20Messaeg0Emb\
    eddedEnum\n\n\x0e\n\x07\x04\0\x04\0\x02\0\x01\x12\x03\x0e\x04\x08\n\x0e\
    \n\x07\x04\0\x04\0\x02\0\x02\x12\x03\x0e\x0b\x0c\n+\n\x06\x04\0\x04\0\
    \x02\x01\x12\x03\x10\x04\x0c\x1a\x1c\x20One\x20-\x20Messaeg0EmbeddedEnum\
    \n\n\x0e\n\x07\x04\0\x04\0\x02\x01\x01\x12\x03\x10\x04\x07\n\x0e\n\x07\
    \x04\0\x04\0\x02\x01\x02\x12\x03\x10\n\x0b\n+\n\x06\x04\0\x04\0\x02\x02\
    \x12\x03\x12\x04\x0c\x1a\x1c\x20Two\x20-\x20Messaeg0EmbeddedEnum\n\n\x0e\
    \n\x07\x04\0\x04\0\x02\x02\x01\x12\x03\x12\x04\x07\n\x0e\n\x07\x04\0\x04\
    \0\x02\x02\x02\x12\x03\x12\n\x0b\n&\n\x04\x04\0\x02\0\x12\x03\x15\x02\
    \x1c\x1a\x19\x20optional\x20field\x20comments\n\n\x0c\n\x05\x04\0\x02\0\
    \x04\x12\x03\x15\x02\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x15\x0b\x11\n\
    \x0c\n\x05\x04\0\x02\0\x01\x12\x03\x15\x12\x17\n\x0c\n\x05\x04\0\x02\0\
    \x03\x12\x03\x15\x1a\x1b\n&\n\x04\x04\0\x02\x01\x12\x03\x18\x02%\x1a\x19\
    \x20repeated\x20field\x20comments\n\n\x0c\n\x05\x04\0\x02\x01\x04\x12\
    \x03\x18\x02\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x18\x0b\x11\n\x0c\n\
    \x05\x04\0\x02\x01\x01\x12\x03\x18\x12\x20\n\x0c\n\x05\x04\0\x02\x01\x03\
    \x12\x03\x18#$\n&\n\x04\x04\0\x02\x02\x12\x03\x1b\x02%\x1a\x19\x20requir\
    ed\x20field\x20comments\n\n\x0c\n\x05\x04\0\x02\x02\x04\x12\x03\x1b\x02\
    \n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x1b\x0b\x11\n\x0c\n\x05\x04\0\
    \x02\x02\x01\x12\x03\x1b\x12\x20\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\
    \x1b#$\n\x1f\n\x02\x04\x01\x12\x04\x1f\0\"\x01\x1a\x13\x20Message1\x20co\
    mments\n\n\n\n\x03\x04\x01\x01\x12\x03\x1f\x08\x10\n'\n\x03\x04\x01\x05\
    \x12\x03!\x04\x1b\x1a\x1b\x20extensions\x20range\x20comments\n\n\x0b\n\
    \x04\x04\x01\x05\0\x12\x03!\x0f\x1a\n\x0c\n\x05\x04\x01\x05\0\x01\x12\
    \x03!\x0f\x13\n\x0c\n\x05\x04\x01\x05\0\x02\x12\x03!\x17\x1a\n\x1f\n\x02\
    \x04\x02\x12\x04%\0;\x01\x1a\x13\x20Message2\x20comments\n\n\n\n\x03\x04\
    \x02\x01\x12\x03%\x08\x10\n0\n\x04\x04\x02\x03\0\x12\x04'\x028\x03\x1a\"\
    \x20Message2EmbeddedMessage\x20comments\n\n\x0c\n\x05\x04\x02\x03\0\x01\
    \x12\x03'\n!\n+\n\x06\x04\x02\x03\0\x04\0\x12\x04)\x040\x05\x1a\x1b\x20M\
    essage2DeepEnum\x20comments\n\n\x0e\n\x07\x04\x02\x03\0\x04\0\x01\x12\
    \x03)\t\x19\n*\n\x08\x04\x02\x03\0\x04\0\x02\0\x12\x03+\x06\x0f\x1a\x19\
    \x20Zero\x20-\x20Message2DeepEnum\n\n\x10\n\t\x04\x02\x03\0\x04\0\x02\0\
    \x01\x12\x03+\x06\n\n\x10\n\t\x04\x02\x03\0\x04\0\x02\0\x02\x12\x03+\r\
    \x0e\n)\n\x08\x04\x02\x03\0\x04\0\x02\x01\x12\x03-\x06\x0e\x1a\x18\x20On\
    e\x20-\x20Message2DeepEnum\n\n\x10\n\t\x04\x02\x03\0\x04\0\x02\x01\x01\
    \x12\x03-\x06\t\n\x10\n\t\x04\x02\x03\0\x04\0\x02\x01\x02\x12\x03-\x0c\r\
    \n)\n\x08\x04\x02\x03\0\x04\0\x02\x02\x12\x03/\x06\x0e\x1a\x18\x20Two\
    \x20-\x20Message2DeepEnum\n\n\x10\n\t\x04\x02\x03\0\x04\0\x02\x02\x01\
    \x12\x03/\x06\t\n\x10\n\t\x04\x02\x03\0\x04\0\x02\x02\x02\x12\x03/\x0c\r\
    \n2\n\x06\x04\x02\x03\0\x03\0\x12\x042\x045\x05\x1a\"\x20Message2Embedde\
    dMessage\x20comments\n\n\x0e\n\x07\x04\x02\x03\0\x03\0\x01\x12\x032\x0c#\
    \n0\n\x08\x04\x02\x03\0\x03\0\x02\0\x12\x034\x06\x20\x1a\x1f\x20Nested\
    \x20message\x20field\x20comments\n\n\x10\n\t\x04\x02\x03\0\x03\0\x02\0\
    \x04\x12\x034\x06\x0e\n\x10\n\t\x04\x02\x03\0\x03\0\x02\0\x05\x12\x034\
    \x0f\x15\n\x10\n\t\x04\x02\x03\0\x03\0\x02\0\x01\x12\x034\x16\x1b\n\x10\
    \n\t\x04\x02\x03\0\x03\0\x02\0\x03\x12\x034\x1e\x1f\n%\n\x06\x04\x02\x03\
    \0\x02\0\x12\x037\x04)\x1a\x16\x20Nested\x20message\x20field\n\n\x0e\n\
    \x07\x04\x02\x03\0\x02\0\x04\x12\x037\x04\x0c\n\x0e\n\x07\x04\x02\x03\0\
    \x02\0\x06\x12\x037\r\x15\n\x0e\n\x07\x04\x02\x03\0\x02\0\x01\x12\x037\
    \x16$\n\x0e\n\x07\x04\x02\x03\0\x02\0\x03\x12\x037'(\n\x1d\n\x04\x04\x02\
    \x02\0\x12\x03:\x02\x1c\x1a\x10\x20field\x20comments\n\n\x0c\n\x05\x04\
    \x02\x02\0\x04\x12\x03:\x02\n\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03:\x0b\
    \x11\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03:\x12\x17\n\x0c\n\x05\x04\x02\
    \x02\0\x03\x12\x03:\x1a\x1b\n\x1d\n\x01\x07\x12\x04@\0G\x01\x1a\x12\x20E\
    xtend0\x20Message1\n\n$\n\x02\x07\0\x12\x03B\x02*\x1a\x19\x20Extend0\x20\
    Field0\x20comments\n\n\n\n\x03\x07\0\x02\x12\x03@\x07\x0f\n\n\n\x03\x07\
    \0\x04\x12\x03B\x02\n\n\n\n\x03\x07\0\x05\x12\x03B\x0b\x11\n\n\n\x03\x07\
    \0\x01\x12\x03B\x12\x20\n\n\n\x03\x07\0\x03\x12\x03B#)\n$\n\x02\x07\x01\
    \x12\x03D\x02*\x1a\x19\x20Extend0\x20Field1\x20comments\n\n\n\n\x03\x07\
    \x01\x02\x12\x03@\x07\x0f\n\n\n\x03\x07\x01\x04\x12\x03D\x02\n\n\n\n\x03\
    \x07\x01\x05\x12\x03D\x0b\x11\n\n\n\x03\x07\x01\x01\x12\x03D\x12\x20\n\n\
    \n\x03\x07\x01\x03\x12\x03D#)\n$\n\x02\x07\x02\x12\x03F\x02*\x1a\x19\x20\
    Extend0\x20Field2\x20comments\n\n\n\n\x03\x07\x02\x02\x12\x03@\x07\x0f\n\
    \n\n\x03\x07\x02\x04\x12\x03F\x02\n\n\n\n\x03\x07\x02\x05\x12\x03F\x0b\
    \x11\n\n\n\x03\x07\x02\x01\x12\x03F\x12\x20\n\n\n\x03\x07\x02\x03\x12\
    \x03F#)\n\x1f\n\x02\x04\x03\x12\x04K\0X\x01\x1a\x13\x20Message3\x20comme\
    nts\n\n\n\n\x03\x04\x03\x01\x12\x03K\x08\x10\n\x1f\n\x04\x04\x03\x02\0\
    \x12\x03M\x02\x1b\x1a\x12\x20Message3\x20field\x200\n\n\x0c\n\x05\x04\
    \x03\x02\0\x04\x12\x03M\x02\n\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03M\x0b\
    \x11\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03M\x12\x16\n\x0c\n\x05\x04\x03\
    \x02\0\x03\x12\x03M\x19\x1a\n\x1f\n\x04\x04\x03\x02\x01\x12\x03O\x02\x1c\
    \x1a\x12\x20Message3\x20field\x201\n\n\x0c\n\x05\x04\x03\x02\x01\x04\x12\
    \x03O\x02\n\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03O\x0b\x11\n\x0c\n\x05\
    \x04\x03\x02\x01\x01\x12\x03O\x12\x17\n\x0c\n\x05\x04\x03\x02\x01\x03\
    \x12\x03O\x1a\x1b\n\x20\n\x04\x04\x03\x08\0\x12\x04R\x02W\x03\x1a\x12\
    \x20oneof0\x20comments\x20\n\n\x0c\n\x05\x04\x03\x08\0\x01\x12\x03R\x08\
    \x0e\n&\n\x04\x04\x03\x02\x02\x12\x03T\x04\x14\x1a\x19\x20oneof0\x20fiel\
    d\x200\x20comments\n\n\x0c\n\x05\x04\x03\x02\x02\x05\x12\x03T\x04\n\n\
    \x0c\n\x05\x04\x03\x02\x02\x01\x12\x03T\x0b\x0f\n\x0c\n\x05\x04\x03\x02\
    \x02\x03\x12\x03T\x12\x13\n&\n\x04\x04\x03\x02\x03\x12\x03V\x04\x15\x1a\
    \x19\x20oneof0\x20field\x201\x20comments\n\n\x0c\n\x05\x04\x03\x02\x03\
    \x06\x12\x03V\x04\x0c\n\x0c\n\x05\x04\x03\x02\x03\x01\x12\x03V\r\x10\n\
    \x0c\n\x05\x04\x03\x02\x03\x03\x12\x03V\x13\x14\n\x1c\n\x02\x05\0\x12\
    \x04[\0b\x01\x1a\x10\x20Enum0\x20comments\n\n\n\n\x03\x05\0\x01\x12\x03[\
    \x05\n\n\x19\n\x04\x05\0\x02\0\x12\x03]\x04\x13\x1a\x0c\x20Enum0\x20Zero\
    \n\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03]\x04\x0e\n\x0c\n\x05\x05\0\x02\0\
    \x02\x12\x03]\x11\x12\n\x18\n\x04\x05\0\x02\x01\x12\x03_\x04\x12\x1a\x0b\
    \x20Enum0\x20One\n\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03_\x04\r\n\x0c\n\
    \x05\x05\0\x02\x01\x02\x12\x03_\x10\x11\n\x18\n\x04\x05\0\x02\x02\x12\
    \x03a\x04\x12\x1a\x0b\x20Enum0\x20Two\n\n\x0c\n\x05\x05\0\x02\x02\x01\
    \x12\x03a\x04\r\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03a\x10\x11\n\x1c\n\
    \x02\x05\x01\x12\x04e\0l\x01\x1a\x10\x20Enum1\x20comments\n\n\n\n\x03\
    \x05\x01\x01\x12\x03e\x05\n\n\x19\n\x04\x05\x01\x02\0\x12\x03g\x04\x13\
    \x1a\x0c\x20Enum1\x20Zero\n\n\x0c\n\x05\x05\x01\x02\0\x01\x12\x03g\x04\
    \x0e\n\x0c\n\x05\x05\x01\x02\0\x02\x12\x03g\x11\x12\n\x19\n\x04\x05\x01\
    \x02\x01\x12\x03i\x04\x12\x1a\x0c\x20Enum1\x20Zero\n\n\x0c\n\x05\x05\x01\
    \x02\x01\x01\x12\x03i\x04\r\n\x0c\n\x05\x05\x01\x02\x01\x02\x12\x03i\x10\
    \x11\n\x19\n\x04\x05\x01\x02\x02\x12\x03k\x04\x12\x1a\x0c\x20Enum1\x20Ze\
    ro\n\n\x0c\n\x05\x05\x01\x02\x02\x01\x12\x03k\x04\r\n\x0c\n\x05\x05\x01\
    \x02\x02\x02\x12\x03k\x10\x11\n\x1f\n\x02\x06\0\x12\x04o\0v\x01\x1a\x13\
    \x20Service0\x20comments\n\n\n\n\x03\x06\0\x01\x12\x03o\x08\x10\n(\n\x04\
    \x06\0\x02\0\x12\x03q\x02,\x1a\x1b\x20Service0\x20Method0\x20comments\n\
    \n\x0c\n\x05\x06\0\x02\0\x01\x12\x03q\x06\r\n\x0c\n\x05\x06\0\x02\0\x02\
    \x12\x03q\x0f\x17\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03q\"*\n(\n\x04\x06\0\
    \x02\x01\x12\x03s\x02+\x1a\x1b\x20Service0\x20Method1\x20comments\n\n\
    \x0c\n\x05\x06\0\x02\x01\x01\x12\x03s\x06\r\n\x0c\n\x05\x06\0\x02\x01\
    \x02\x12\x03s\x0e\x16\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03s!)\n(\n\x04\
    \x06\0\x02\x02\x12\x03u\x022\x1a\x1b\x20Serivce0\x20Method2\x20comments\
    \n\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03u\x06\r\n\x0c\n\x05\x06\0\x02\
    \x02\x05\x12\x03u\x0e\x14\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03u\x15\x1d\
    \n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03u(0\n\x20\n\x02\x04\x04\x12\x05|\0\
    \x83\x01\x01\x1a\x13\x20Message4\x20comments\n\n\n\n\x03\x04\x04\x01\x12\
    \x03|\x08\x10\n)\n\x03\x04\x04\x06\x12\x05~\x02\x81\x01\x03\x1a\x1b\x20M\
    essage4\x20Extend0\x20comments\n\n0\n\x04\x04\x04\x06\0\x12\x04\x80\x01\
    \x04+\x1a\"\x20Message4\x20Extend0\x20Field0\x20comments\n\n\x0c\n\x05\
    \x04\x04\x06\0\x02\x12\x03~\t\x11\n\r\n\x05\x04\x04\x06\0\x04\x12\x04\
    \x80\x01\x04\x0c\n\r\n\x05\x04\x04\x06\0\x05\x12\x04\x80\x01\r\x13\n\r\n\
    \x05\x04\x04\x06\0\x01\x12\x04\x80\x01\x14\"\n\r\n\x05\x04\x04\x06\0\x03\
    \x12\x04\x80\x01%*\n\x1f\n\x01\x07\x12\x06\x86\x01\0\x8d\x01\x01\x1a\x12\
    \x20Extend1\x20Message1\n\n%\n\x02\x07\x03\x12\x04\x88\x01\x02*\x1a\x19\
    \x20Extend1\x20Field0\x20comments\n\n\x0b\n\x03\x07\x03\x02\x12\x04\x86\
    \x01\x07\x0f\n\x0b\n\x03\x07\x03\x04\x12\x04\x88\x01\x02\n\n\x0b\n\x03\
    \x07\x03\x05\x12\x04\x88\x01\x0b\x11\n\x0b\n\x03\x07\x03\x01\x12\x04\x88\
    \x01\x12\x20\n\x0b\n\x03\x07\x03\x03\x12\x04\x88\x01#)\n%\n\x02\x07\x04\
    \x12\x04\x8a\x01\x02*\x1a\x19\x20Extend1\x20Field1\x20comments\n\n\x0b\n\
    \x03\x07\x04\x02\x12\x04\x86\x01\x07\x0f\n\x0b\n\x03\x07\x04\x04\x12\x04\
    \x8a\x01\x02\n\n\x0b\n\x03\x07\x04\x05\x12\x04\x8a\x01\x0b\x11\n\x0b\n\
    \x03\x07\x04\x01\x12\x04\x8a\x01\x12\x20\n\x0b\n\x03\x07\x04\x03\x12\x04\
    \x8a\x01#)\n%\n\x02\x07\x05\x12\x04\x8c\x01\x02*\x1a\x19\x20Extend1\x20F\
    ield2\x20comments\n\n\x0b\n\x03\x07\x05\x02\x12\x04\x86\x01\x07\x0f\n\
    \x0b\n\x03\x07\x05\x04\x12\x04\x8c\x01\x02\n\n\x0b\n\x03\x07\x05\x05\x12\
    \x04\x8c\x01\x0b\x11\n\x0b\n\x03\x07\x05\x01\x12\x04\x8c\x01\x12\x20\n\
    \x0b\n\x03\x07\x05\x03\x12\x04\x8c\x01#)\n\x1f\n\x01\x07\x12\x06\x91\x01\
    \0\x98\x01\x01\x1a\x12\x20Extend2\x20Message1\n\n%\n\x02\x07\x06\x12\x04\
    \x93\x01\x02*\x1a\x19\x20Extend2\x20Field0\x20comments\n\n\x0b\n\x03\x07\
    \x06\x02\x12\x04\x91\x01\x07\x0f\n\x0b\n\x03\x07\x06\x04\x12\x04\x93\x01\
    \x02\n\n\x0b\n\x03\x07\x06\x05\x12\x04\x93\x01\x0b\x11\n\x0b\n\x03\x07\
    \x06\x01\x12\x04\x93\x01\x12\x20\n\x0b\n\x03\x07\x06\x03\x12\x04\x93\x01\
    #)\n%\n\x02\x07\x07\x12\x04\x95\x01\x02*\x1a\x19\x20Extend2\x20Field1\
    \x20comments\n\n\x0b\n\x03\x07\x07\x02\x12\x04\x91\x01\x07\x0f\n\x0b\n\
    \x03\x07\x07\x04\x12\x04\x95\x01\x02\n\n\x0b\n\x03\x07\x07\x05\x12\x04\
    \x95\x01\x0b\x11\n\x0b\n\x03\x07\x07\x01\x12\x04\x95\x01\x12\x20\n\x0b\n\
    \x03\x07\x07\x03\x12\x04\x95\x01#)\n%\n\x02\x07\x08\x12\x04\x97\x01\x02*\
    \x1a\x19\x20Extend2\x20Field2\x20comments\n\n\x0b\n\x03\x07\x08\x02\x12\
    \x04\x91\x01\x07\x0f\n\x0b\n\x03\x07\x08\x04\x12\x04\x97\x01\x02\n\n\x0b\
    \n\x03\x07\x08\x05\x12\x04\x97\x01\x0b\x11\n\x0b\n\x03\x07\x08\x01\x12\
    \x04\x97\x01\x12\x20\n\x0b\n\x03\x07\x08\x03\x12\x04\x97\x01#)\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(7);
            messages.push(Message0::generated_message_descriptor_data());
            messages.push(Message1::generated_message_descriptor_data());
            messages.push(Message2::generated_message_descriptor_data());
            messages.push(Message3::generated_message_descriptor_data());
            messages.push(Message4::generated_message_descriptor_data());
            messages.push(message2::Message2EmbeddedMessage::generated_message_descriptor_data());
            messages.push(message2::message2embedded_message::Message2EmbeddedMessage::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(4);
            enums.push(Enum0::generated_enum_descriptor_data());
            enums.push(Enum1::generated_enum_descriptor_data());
            enums.push(message0::Message0EmbeddedEnum::generated_enum_descriptor_data());
            enums.push(message2::message2embedded_message::Message2DeepEnum::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
